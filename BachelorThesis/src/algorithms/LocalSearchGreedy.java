package algorithms;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


/**
 * A local search algorithm for edge coloring. It generates a starting
 * solution based on the order the edges of a graph were given and the 
 * chromatic index calculated by the greedy algorithm. A neighboring 
 * solution is generated by swapping the places of two edges in the 
 * order of edges. These two edges are determined by random. 
 * 100 iterations without improvements are done before
 * the algorithm stops. It also ends if the lower bound of the chromatic 
 * index is reached.
 * 
 * @author Stephanie Heyderich
 */
public class LocalSearchGreedy extends OrderBasedAlgorithms {
	
	/**
	 * Creates a random new Order of a Point List
	 * based on a given one 
	 * @param old
	 * @return
	 */
	protected List<Point> createNewOrder(List<Point> old){
		List<Point> neighbor = new ArrayList<Point>(solutionOrder);
		int swapOne = rand.nextInt(neighbor.size()-1);
		int swapTwo = rand.nextInt(neighbor.size()-1); 
		Collections.swap(neighbor, swapOne, swapTwo);
		return neighbor;
	}
	
}
